{"ast":null,"code":"var _jsxFileName = \"/Users/pmsheijmans/Projecten/fietslabyrinth/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport axios from 'axios';\nimport XMLParser from 'react-xml-parser';\nimport React, { useState } from 'react';\nimport XMLData from './languages_all.xml';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Read XML file and store it as a string\n  const [XMLtext, setXMLtext] = useState(\"\");\n  axios.get(XMLData, {\n    \"Content-Type\": \"application/xml; charset=utf-8\"\n  }).then(response => {\n    setXMLtext(response.data);\n  }); // const xmlStr = '<a id=\"a\"><b id=\"b\">hey!</b></a>';\n\n  const parser = new DOMParser();\n  const dom = parser.parseFromString(XMLtext, \"application/xml\"); // print the name of the root element or error message\n\n  console.log(dom.getElementsByTagName('endTour')); // console.log(dom.documentElement.nodeName == \"parsererror\" ? \"error while parsing\" : dom.documentElement.nodeName);\n  // Get Spanish translation from string\n\n  getTranslation(XMLtext, \"endTour\", \"sp\"); // console.log(XMLtext);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Click me to see the Spanish translation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Spaanse text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"22cyt2h5U/TGH6JBdLHooVHG6dU=\");\n\n_c = App;\n\nfunction getTranslation(XMLtext, element, language) {\n  // console.log(element);\n  return element;\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pmsheijmans/Projecten/fietslabyrinth/src/App.js"],"names":["axios","XMLParser","React","useState","XMLData","App","XMLtext","setXMLtext","get","then","response","data","parser","DOMParser","dom","parseFromString","console","log","getElementsByTagName","getTranslation","element","language"],"mappings":";;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAGA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,qBAApB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAGb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;AACAH,EAAAA,KAAK,CAACQ,GAAN,CAAUJ,OAAV,EAAmB;AACjB,oBAAgB;AADC,GAAnB,EAGGK,IAHH,CAGSC,QAAD,IAAc;AAClBH,IAAAA,UAAU,CAACG,QAAQ,CAACC,IAAV,CAAV;AACD,GALH,EALa,CAab;;AACA,QAAMC,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,QAAMC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBT,OAAvB,EAAgC,iBAAhC,CAAZ,CAfa,CAgBb;;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,oBAAJ,CAAyB,SAAzB,CAAZ,EAjBa,CAmBb;AAIA;;AACAC,EAAAA,cAAc,CAACb,OAAD,EAAU,SAAV,EAAqB,IAArB,CAAd,CAxBa,CAyBb;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAnCQD,G;;KAAAA,G;;AAqCT,SAASc,cAAT,CAAwBb,OAAxB,EAAiCc,OAAjC,EAA0CC,QAA1C,EAAoD;AAClD;AACA,SAAOD,OAAP;AACD;;AAGD,eAAef,GAAf","sourcesContent":["\nimport './App.css';\nimport axios from 'axios';\nimport XMLParser from 'react-xml-parser';\n\n\nimport React, { useState } from 'react';\nimport XMLData from './languages_all.xml';\n\n\nfunction App() {\n\n\n  // Read XML file and store it as a string\n  const [XMLtext, setXMLtext] = useState(\"\");\n  axios.get(XMLData, {\n    \"Content-Type\": \"application/xml; charset=utf-8\"\n  })\n    .then((response) => {\n      setXMLtext(response.data)\n    });\n\n\n  // const xmlStr = '<a id=\"a\"><b id=\"b\">hey!</b></a>';\n  const parser = new DOMParser();\n  const dom = parser.parseFromString(XMLtext, \"application/xml\");\n  // print the name of the root element or error message\n  console.log(dom.getElementsByTagName('endTour'));\n\n  // console.log(dom.documentElement.nodeName == \"parsererror\" ? \"error while parsing\" : dom.documentElement.nodeName);\n\n\n\n  // Get Spanish translation from string\n  getTranslation(XMLtext, \"endTour\", \"sp\")\n  // console.log(XMLtext);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button>Click me to see the Spanish translation!</button>\n        <span>Spaanse text</span>\n      </header>\n    </div>\n  );\n}\n\nfunction getTranslation(XMLtext, element, language) {\n  // console.log(element);\n  return element;\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}